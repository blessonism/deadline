// 检查浏览器是否支持Service Worker
if ('serviceWorker' in navigator) {
  let registration;
  // 记录当前使用的缓存版本
  let currentCacheVersion = localStorage.getItem('sw_cache_version') || '';
  
  // 特别处理：检查是否存在建军节计时器，如存在则清除
  try {
    const timers = JSON.parse(localStorage.getItem('timers') || '[]');
    const hasArmyDay = timers.some(timer => 
      timer.name && (timer.name.includes('建军节') || timer.name.includes('军节'))
    );
    
    if (hasArmyDay) {
      console.log('检测到建军节计时器，准备清除...');
      // 仅保留用户手动创建的计时器
      const userTimers = timers.filter(timer => !timer.isAutoGenerated);
      localStorage.setItem('timers', JSON.stringify(userTimers));
      // 标记需要刷新
      localStorage.setItem('need_refresh', 'true');
    }
  } catch (e) {
    console.error('检查计时器数据失败:', e);
  }
  
  window.addEventListener('load', () => {
    // 检查是否需要刷新
    if (localStorage.getItem('need_refresh') === 'true') {
      console.log('检测到需要刷新页面');
      localStorage.removeItem('need_refresh');
      window.location.reload();
      return;
    }

    navigator.serviceWorker.register('/sw.js')
      .then(reg => {
        registration = reg;
        console.log('ServiceWorker 注册成功:', registration.scope);
        
        // 检查Service Worker是否需要更新
        reg.onupdatefound = function() {
          const installingWorker = reg.installing;
          installingWorker.onstatechange = function() {
            if (installingWorker.state === 'installed' && navigator.serviceWorker.controller) {
              console.log('检测到新的Service Worker已安装');
              // 强制刷新页面获取最新版本
              window.location.reload();
            }
          };
        };
      })
      .catch(error => {
        console.error('ServiceWorker 注册失败:', error);
      });
      
    // 确保Service Worker控制页面后再设置通知
    navigator.serviceWorker.ready.then(reg => {
      console.log('ServiceWorker 已准备就绪');
      
      // 页面加载时检查更新
      if (navigator.serviceWorker.controller) {
        navigator.serviceWorker.controller.postMessage({
          action: 'checkForUpdates',
          isInitialLoad: true
        });
      }
      
      // 监听从SW发来的消息
      navigator.serviceWorker.addEventListener('message', event => {
        if (event.data && event.data.action === 'cacheUpdated') {
          console.log('缓存已更新：', new Date(event.data.timestamp).toLocaleString());
          // 这里可以显示缓存更新的通知或提示
          window.dispatchEvent(new CustomEvent('cacheUpdated', { detail: event.data }));
        } else if (event.data && event.data.action === 'cacheUpdatedWithChanges') {
          console.log('缓存已更新，发现新内容：', new Date(event.data.timestamp).toLocaleString());
          
          // 检查是否有新版本
          if (event.data.cacheVersion && event.data.cacheVersion !== currentCacheVersion) {
            console.log(`缓存版本变更: ${currentCacheVersion || '无'} -> ${event.data.cacheVersion}`);
            localStorage.setItem('sw_cache_version', event.data.cacheVersion);
            
            // 只有在版本变更时才发送更新通知
            window.dispatchEvent(new CustomEvent('cacheUpdatedWithChanges', { detail: event.data }));
          } else {
            console.log('缓存内容已更新，但版本未变');
          }
        } else if (event.data && event.data.action === 'cacheChecked') {
          console.log('缓存检查完成，无更新：', new Date(event.data.timestamp).toLocaleString());
          window.dispatchEvent(new CustomEvent('cacheChecked', { detail: event.data }));
        }
      });
    }).catch(error => {
      console.error('ServiceWorker ready 错误:', error);
    });
  });
  
  // 处理在线状态变化
  window.addEventListener('online', () => {
    console.log('网络已恢复连接，正在更新缓存...');
    // 如果Service Worker已激活，发送更新缓存的消息
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({
        action: 'updateCache'
      });
      
      // 触发自定义事件，通知应用恢复在线状态
      window.dispatchEvent(new CustomEvent('appOnline'));
    }
  });
}

// 手动更新缓存的辅助函数
window.updateServiceWorkerCache = function() {
  if (navigator.serviceWorker.controller) {
    navigator.serviceWorker.controller.postMessage({
      action: 'updateCache'
    });
    return true;
  }
  return false;
};
